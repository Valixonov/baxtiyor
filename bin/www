#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('sequelizetest06042018:server');
var http = require('http');
var models = require('../models');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require("socket.io")(server);
const Op = models.Sequelize.Op;
io.on("connection", function (socket) {
    socket.join("default");
    console.log(socket.id);
    var socketid = socket.id;
    var UserId;
    socket.on("login", json => {

        json = JSON.parse(json);
        models.Users.findOne({
            where: {
                login: json.login
            }
        }).then(ures => {
            UserId = ures.id;
            socket.emit("me", ures.dataValues);
            // console.log(ures.dataValues);
            models.ConnectedUsers.findOne({
                where: {
                    UserId: ures.id
                }
            }).then(json => {
                json.update({
                    sockedid: socketid
                });
            }).catch(error => {
                models.ConnectedUsers.create({
                    UserId: ures.id,
                    sockedid: socketid
                });
            });
            models.ConnectedUsers.findAll({
                where:{
                    UserId:{
                        [Op.ne]:UserId
                    }
                },
                include: [
                    models.Users
                ],

            }).then(res => {
                var data = [];
                res.forEach(i => {
                    data.push(i.User);
                });
                socket.emit("start", {
                    error: false,
                    data: data
                });
            });
        }).catch(error => {
            console.log("Error login");
        });
    });
    socket.on("signup", json => {
        var jdata = JSON.parse(json);
        console.log(jdata);
        models.Users.findOne({
            where: {
                login: jdata.login
            }
        }).then(ufo => {
            if (ufo == null) {
                console.log(ufo);
                models.Users.create({
                    login: jdata.login,
                    last_name: jdata.lastname,
                    first_name: jdata.firstname,
                    middle_name: jdata.middlename,
                    mobile: jdata.mobile
                }).then(next => {
                    UserId = next.id;
                    socket.emit("me", next.dataValues);
                    console.log("\n UserId === " + UserId + "\n");
                    models.ConnectedUsers.findOne({
                        where: {
                            UserId: next.id
                        }
                    }).then(j => {
                        if (j == null) {
                            models.ConnectedUsers.create({
                                UserId: next.id,
                                sockedid: socketid
                            }).then(cres => {
                                socket.broadcast.emit("newContact", [].push(cres.User));
                            });
                        } else {
                            j.update({
                                sockedid: socketid
                            });
                        }
                    }).catch(er => {

                    });
                    models.ConnectedUsers.findAll({
                        where: {
                            UserId: {
                                [Op.ne]: next.id
                            }
                        },
                        include: [
                            models.Users
                        ]
                    }).then(res => {
                        var data = [];
                        res.forEach(i => {
                            data.push(i.User);
                        });
                        socket.emit("start", {
                            error: false,
                            data: data
                        });
                    });
                }).catch(err => {
                    console.log(err);
                });
            } else {
                socket.emit("xato", {
                    error: true,
                    message: "Bunday login ro'yhatdan o'tgan",
                    data: []
                });
                // models.ConnectedUsers.findAll({
                //     include: [
                //         models.Users
                //     ]
                // }).then(res => {
                //     var data = [];
                //     res.forEach(i => {
                //         data.push(i.User);
                //     });
                //     socket.emit("start", {
                //         error: false,
                //         data: data
                //     });
                // });

            }
            //
        }).catch(err => {
            console.log(err);
        });
    });
    socket.on("send", json => {
        //{from:1,to:2,message:asd}
        json = JSON.parse(json);
        console.log(json);
        var to = null;
        models.ConnectedUsers.findOne({
            where: {
                UserId: json.to,
            },
            include: [
                models.Users
            ]
        }).then(connected => {
            if (connected != null) {
                to = connected;
            } else {
                console.log('123========='+connected);
            }
        });
        //json.push("name:" + );
        console.log(to);
        console.log(json);
        models.Messangers.create({
            From_User: json.from,
            To_User: json.to,
            text: json.message
        }).then(mress => {
            socket.broadcast.to(to.sockedid).emit("newMessage", {json});
        });
    });
    socket.on("getConversation", json => {
        //{from:1,to:2}
        var jdata = JSON.parse(json);
        console.log(jdata);
        models.Messangers.findAll({
            where: {
                [Op.or]: [
                    {
                        [Op.and]: [{From_User: jdata.from}, {To_User: jdata.to}]
                    },
                    {
                        [Op.and]: [{From_User: jdata.to}, {To_User: jdata.from}]
                    }
                ]
            },
            include:[
                models.Users
            ]
        }).then(mess => {
            var data = [];
            mess.forEach(i => {
                //console.log(i.dataValues);
                //console.log("\n");
                data.push({
                    Userid:i.UserId,
                    text:i.text,
                    name:i.User.first_name,
                    time:i.createdAt
                });
            });
            console.log(data);
            socket.emit("messages", {data:data});
        });
    });
    socket.on("disconnect", data => {
        models.ConnectedUsers.destroy({
            where: {
                UserId: UserId
            }
        });
        console.log(socketid);
    });
});

/**
 * Listen on provided port, on all network interfaces.
 */
models.sequelize.sync().then(function () {
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
});

/*server.listen(port);
 server.on('error', onError);
 server.on('listening', onListening);*/

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
    console.log("Server ishga tushdi");
}
